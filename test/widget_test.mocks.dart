// Mocks generated by Mockito 5.4.4 from annotations
// in todo/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:bloc/bloc.dart' as _i7;
import 'package:flutter/cupertino.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo/data/models/questions_model.dart' as _i9;
import 'package:todo/data/repo/auth_repository.dart' as _i2;
import 'package:todo/domain/bloc/navigator_bloc.dart' as _i6;
import 'package:todo/domain/usecase/read_questions_use_case.dart' as _i8;
import 'package:todo/domain/usecase/sign_in_use_case.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthRepository_0 extends _i1.SmartFake
    implements _i2.AuthRepository {
  _FakeAuthRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGlobalKey_1<T extends _i3.State<_i3.StatefulWidget>>
    extends _i1.SmartFake implements _i3.GlobalKey<T> {
  _FakeGlobalKey_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SignInUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInUseCase extends _i1.Mock implements _i4.SignInUseCase {
  @override
  _i2.AuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
        returnValueForMissingStub: _FakeAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i5.Future<bool> execute(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            email,
            password,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [NavigatorBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorBloc extends _i1.Mock implements _i6.NavigatorBloc {
  @override
  _i3.GlobalKey<_i3.NavigatorState> get navigatorkey => (super.noSuchMethod(
        Invocation.getter(#navigatorkey),
        returnValue: _FakeGlobalKey_1<_i3.NavigatorState>(
          this,
          Invocation.getter(#navigatorkey),
        ),
        returnValueForMissingStub: _FakeGlobalKey_1<_i3.NavigatorState>(
          this,
          Invocation.getter(#navigatorkey),
        ),
      ) as _i3.GlobalKey<_i3.NavigatorState>);

  @override
  _i5.Stream<dynamic> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<dynamic>.empty(),
        returnValueForMissingStub: _i5.Stream<dynamic>.empty(),
      ) as _i5.Stream<dynamic>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void add(_i6.NavigatorEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i6.NavigatorEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(dynamic state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i6.NavigatorEvent>(
    _i7.EventHandler<E, dynamic>? handler, {
    _i7.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i7.Transition<_i6.NavigatorEvent, dynamic>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void onChange(_i7.Change<dynamic>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ReadQuestionUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockReadQuestionUseCase extends _i1.Mock
    implements _i8.ReadQuestionUseCase {
  @override
  _i2.AuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
        returnValueForMissingStub: _FakeAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i5.Future<List<_i9.Question>> getQuestions() => (super.noSuchMethod(
        Invocation.method(
          #getQuestions,
          [],
        ),
        returnValue: _i5.Future<List<_i9.Question>>.value(<_i9.Question>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i9.Question>>.value(<_i9.Question>[]),
      ) as _i5.Future<List<_i9.Question>>);
}
